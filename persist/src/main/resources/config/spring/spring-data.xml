<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-3.1.xsd
			http://www.springframework.org/schema/data/jpa
   			http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

    <context:component-scan base-package="com.iuni.nms.persist"/>

    <bean id="dbProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean"
          p:location="classpath:nms-dbconfig.properties"/>

    <context:property-placeholder properties-ref="dbProperties" ignore-unresolvable="true"/>

    <!-- Activate Spring Data JPA repository support -->
    <jpa:repositories base-package="com.iuni.nms.persist.repository" transaction-manager-ref="transactionManager"
                      entity-manager-factory-ref="entityManagerFactory"/>

    <!-- 配置数据源，使用的是alibaba的Druid(德鲁伊)数据源 -->
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 数据库基本信息配置 -->
        <property name="driverClassName" value="${oracle.driver}"/>
        <property name="url" value="${oracle.url}"/>
        <property name="username" value="${oracle.username}"/>
        <property name="password" value="${oracle.password}"/>
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${druid.maxActive}"/>
        <!-- 最大空闲连接数 -->
        <!--<property name="maxIdle" value="${druid.maxIdle}" />-->
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${druid.minIdle}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="${druid.removeAbandoned}"/>
        <!-- 超过时间限制多长； -->
        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
        <property name="validationQuery" value="${druid.validationQuery}"/>
        <!-- 申请连接的时候检测 -->
        <property name="testWhileIdle" value="${druid.testWhileIdle}"/>
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="${druid.testOnBorrow}"/>
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="${druid.testOnReturn}"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${druid.maxPoolPreparedStatementPerConnectionSize}"/>
        <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
                监控统计用的filter:stat
                日志用的filter:log4j
               防御SQL注入的filter:wall -->
        <property name="filters" value="${druid.filters}"/>
    </bean>

    <!-- Declare a JPA entityManagerFactory -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
          p:persistenceUnitName="hibernatePersistenceUnit"
          p:dataSource-ref="druidDataSource"
          p:jpaVendorAdapter-ref="hibernateVendor"
          p:packagesToScan="com.iuni.nms.persist.domain">
        <property name="jpaProperties">
            <props>
                <!--<prop name="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>-->
                <prop key="hibernate.show_sql">true</prop>
                <!--<prop key="hibernate.hbm2ddl.auto">update</prop>-->
                <prop key="hibernate.jdbc.fetch_size">100</prop>
                <prop key="hibernate.jdbc.batch_size">50</prop>
            </props>
        </property>
    </bean>

    <!-- Specify our ORM vendor -->
    <bean id="hibernateVendor" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
          p:showSql="false"/>

    <!-- Declare a transaction manager-->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
          p:entityManagerFactory-ref="entityManagerFactory"/>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- ========================================针对myBatis的配置项============================== -->
    <!-- 配置sqlSessionFactory -->
    <!--<bean itemId="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
    <!--&lt;!&ndash; 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 &ndash;&gt;-->
    <!--<property name="dataSource" ref="druidDataSource" />-->
    <!--<property name="configLocation" value="classpath:config/mybatis/mybatis-config.xml"/>-->
    <!--&lt;!&ndash; 自动扫描config/mybatis/mapping目录下的所有SQL映射的xml文件, 省掉Configuration.xml里的手工配置-->
    <!--value="classpath:config/mybatis/mapping/**/*.xml"指的是classpath(类路径)下config/mybatis/mapping包及子包中的所有xml文件-->
    <!--&ndash;&gt;-->
    <!--<property name="mapperLocations" value="classpath:config/mybatis/mapping/**/*.xml" />-->
    <!--</bean>-->
    <!--&lt;!&ndash; 配置扫描器 &ndash;&gt;-->
    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
    <!--&lt;!&ndash; 扫描com.iuni.nms.persist.mapper这个包以及它的子包下的所有映射接口类 &ndash;&gt;-->
    <!--<property name="basePackage" value="com.iuni.nms.persist.mapper" />-->
    <!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />-->
    <!--</bean>-->
    <!--&lt;!&ndash; 配置Spring的事务管理器 &ndash;&gt;-->
    <!--<bean itemId="transactionManagerOfMybatis" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
    <!--<property name="dataSource" ref="druidDataSource" />-->
    <!--</bean>-->
    <!--&lt;!&ndash; 注解方式配置事物 &ndash;&gt;-->
    <!--<tx:annotation-driven transaction-manager="transactionManagerOfMybatis" />-->

    <!-- 配置druid监控spring/jdbc -->
    <!--<bean itemId="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">-->
    <!--</bean>-->
    <!--<bean itemId="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">-->
    <!--<property name="patterns">-->
    <!--<list>-->
    <!--<value>com.iuni.nms.persist.mapper.*</value>-->
    <!--<value>com.iuni.nms.persist.repository.*</value>-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->
    <!--<aop:config>-->
    <!--<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />-->
    <!--</aop:config>-->
</beans>